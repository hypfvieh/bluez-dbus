package org.bluez.mesh;

import java.util.Map;

import org.bluez.exceptions.mesh.BluezMeshAlreadyExistsException;
import org.bluez.exceptions.mesh.BluezMeshBusyException;
import org.bluez.exceptions.mesh.BluezMeshDoesNotExistException;
import org.bluez.exceptions.mesh.BluezMeshFailedException;
import org.bluez.exceptions.mesh.BluezMeshInProgressException;
import org.bluez.exceptions.mesh.BluezMeshInvalidArgumentsException;
import org.bluez.exceptions.mesh.BluezMeshNotAuthorizedException;
import org.freedesktop.dbus.interfaces.DBusInterface;
import org.freedesktop.dbus.types.UInt16;
import org.freedesktop.dbus.types.Variant;

/**
 * File generated - 2020-12-28.<br>
 * Based on bluez Documentation: mesh-api.txt.<br>
 * <br>
 * <b>Service:</b> org.bluez.mesh<br>
 * <b>Interface:</b> org.bluez.mesh.Management1<br>
 * <br>
 * <b>Object path:</b><br>
 *             /org/bluez/mesh/node&lt;uuid&gt;<br>
 *             where &lt;uuid&gt; is the Device UUID passed to Join(),<br>
 *             CreateNetwork() or Import()<br>
 */
public interface Management1 extends DBusInterface {

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     *  This method is used by the application that supports<br>
     *  org.bluez.mesh.Provisioner1 interface to start listening<br>
     *  (scanning) for unprovisioned devices in the area.<br>
     *  <br>
     *  The options parameter is a dictionary with the following keys<br>
     *  defined:<br>
     *  <pre>
     *  uint16 Seconds
     *      Specifies number of seconds for scanning to be active.
     *      If set to 0 or if this key is not present, then the
     *      scanning will continue until UnprovisionedScanCancel()
     *      or AddNode() methods are called.
     *  </pre>
     *  <br>
     *  Each time a unique unprovisioned beacon is heard, the<br>
     *  ScanResult() method on the app will be called with the result.<br>
     *
     * @param _options options
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshNotAuthorizedException when not authorized
     * @throws BluezMeshBusyException when already busy
     */
    void UnprovisionedScan(Map<String, Variant<?>> _options) throws BluezMeshInvalidArgumentsException, BluezMeshNotAuthorizedException, BluezMeshBusyException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application that supports<br>
     *  org.bluez.mesh.Provisioner1 interface to stop listening<br>
     *  (scanning) for unprovisioned devices in the area.<br>
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshNotAuthorizedException when not authorized
     */
    void UnprovisionedScanCancel() throws BluezMeshInvalidArgumentsException, BluezMeshNotAuthorizedException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application that supports<br>
     *  org.bluez.mesh.Provisioner1 interface to add the<br>
     *  unprovisioned device specified by uuid, to the Network.<br>
     *  <br>
     *  The uuid parameter is a 16-byte array that contains Device UUID<br>
     *  of the unprovisioned device to be added to the network.<br>
     *  <br>
     *  The options parameter is a dictionary that may contain<br>
     *  additional configuration info (currently an empty placeholder<br>
     *  for forward compatibility).<br>
     *
     * @param _uuid uuid (16-byte array)
     * @param _options options
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshNotAuthorizedException when not authorized
     */
    void AddNode(byte[] _uuid, Map<String, Variant<?>> _options) throws BluezMeshInvalidArgumentsException, BluezMeshNotAuthorizedException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to generate and add a new<br>
     *  network subnet key.<br>
     *  <br>
     *  The net_index parameter is a 12-bit value (0x001-0xFFF)<br>
     *  specifying which net key to add.<br>
     *  <br>
     *  This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshNotAuthorizedException when not authorized
     */
    void CreateSubnet(UInt16 _netIndex) throws BluezMeshInvalidArgumentsException, BluezMeshNotAuthorizedException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to add a network subnet<br>
     * key, that was originally generated by a remote Config Client.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which net key to add.<br>
     * <br>
     * The net_key parameter is the 16-byte value of the net key being<br>
     * imported.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     * @param _netKey net_key
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshAlreadyExistsException when already exists
     */
    void ImportSubnet(UInt16 _netIndex, byte[] _netKey) throws BluezMeshInvalidArgumentsException, BluezMeshFailedException, BluezMeshAlreadyExistsException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to generate a new network<br>
     * subnet key, and set it's key refresh state to Phase 1.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which net key to update. Note that the subnet must<br>
     * exist prior to updating.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshDoesNotExistException when not existing
     * @throws BluezMeshBusyException when already busy
     */
    void UpdateSubnet(UInt16 _netIndex) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException, BluezMeshDoesNotExistException, BluezMeshBusyException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application that to delete a subnet.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x001-0xFFF)<br>
     * specifying which net key to delete. The primary net key (0x000)<br>
     * may not be deleted.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     */
    void DeleteSubnet(UInt16 _netIndex) throws BluezMeshInvalidArgumentsException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used to set the master key update phase of the<br>
     * given subnet. When finalizing the procedure, it is important<br>
     * to CompleteAppKeyUpdate() on all app keys that have been<br>
     * updated during the procedure prior to setting phase 3.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which subnet phase to set.<br>
     * <br>
     * The phase parameter is used to cycle the local key database<br>
     * through the phases as defined by the Mesh Profile Specification.
     * <pre>
     * Allowed values:
     *      0 - Cancel Key Refresh (May only be called from Phase 1,
     *          and should never be called once the new key has
     *          started propagating)
     *      1 - Invalid Argument (see NetKeyUpdate method)
     *      2 - Go to Phase 2 (May only be called from Phase 1)
     *      3 - Complete Key Refresh procedure (May only be called
     *          from Phase 2)
     * </pre>
     * This call affects the local bluetooth-meshd key database only.<br>
     * It is the responsibility of the application to maintain the key<br>
     * refresh phases per the Mesh Profile Specification.<br>
     *
     * @param _netIndex net_index
     * @param _phase phase
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshDoesNotExistException when not existing
     */
    void SetKeyPhase(UInt16 _netIndex, byte _phase) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException, BluezMeshDoesNotExistException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to generate and add a new<br>
     * application key.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which net key to bind the application key to.<br>
     * <br>
     * The app_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which app key to add.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     * @param _appIndex app_index
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshAlreadyExistsException when already existing
     * @throws BluezMeshDoesNotExistException when not existing
     */
    void CreateAppKey(UInt16 _netIndex, UInt16 _appIndex) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException, BluezMeshAlreadyExistsException, BluezMeshDoesNotExistException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to add an application<br>
     * key, that was originally generated by a remote Config Client.<br>
     * <br>
     * The net_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which net key to bind the application key to.<br>
     * <br>
     * The app_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which app key to import.<br>
     * <br>
     * The app_key parameter is the 16-byte value of the key being<br>
     * imported.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _netIndex net_index
     * @param _appIndex app_index
     * @param _appKey app_key
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshAlreadyExistsException when already existing
     * @throws BluezMeshDoesNotExistException when not existing
     */
    void ImportAppKey(UInt16 _netIndex, UInt16 _appIndex, byte[] _appKey) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException, BluezMeshAlreadyExistsException, BluezMeshDoesNotExistException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to generate a new<br>
     * application key.<br>
     * <br>
     * The app_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which app key to update. Note that the subnet that<br>
     * the key is bound to must exist and be in Phase 1.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     * @param _appIndex app_index
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     * @throws BluezMeshDoesNotExistException when not existing
     * @throws BluezMeshInProgressException when already in progress
     */
    void UpdateAppKey(UInt16 _appIndex) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException, BluezMeshDoesNotExistException, BluezMeshInProgressException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to delete an application<br>
     * key.<br>
     * <br>
     * The app_index parameter is a 12-bit value (0x000-0xFFF)<br>
     * specifying which app key to delete.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.
     *
     * @param _appIndex app_index
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     */
    void DeleteAppKey(UInt16 _appIndex) throws BluezMeshInvalidArgumentsException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to import a remote node<br>
     * that has been provisioned by an external process.<br>
     * <br>
     * The primary parameter specifies the unicast address of the<br>
     * the node being imported.<br>
     * <br>
     * The count parameter specifies the number of elements that are<br>
     * assigned to this remote node.<br>
     * <br>
     * The device_key parameter is the access layer key that will be<br>
     * will used to decrypt privledged messages from this remote node.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.<br>
     * <br>
     * It is an error to call this with address range overlapping<br>
     * with local element addresses.
     *
     * @param _primary primary
     * @param _count count
     * @param _deviceKey device_key
     *
     * @throws BluezMeshFailedException when operation failed
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     */
    void ImportRemoteNode(UInt16 _primary, byte _count, byte[] _deviceKey) throws BluezMeshFailedException, BluezMeshInvalidArgumentsException;

    /**
     * <b>From bluez documentation:</b><br>
     * <br>
     * This method is used by the application to delete a remote node<br>
     * from the local device key database.<br>
     * <br>
     * The primary parameter specifies the unicast address of the<br>
     * the node being deleted.<br>
     * <br>
     * The count parameter specifies the number of elements that were<br>
     * assigned to the remote node.<br>
     * <br>
     * This call affects the local bluetooth-meshd key database only.<br>
     * <br>
     * It is an error to call this with address range overlapping<br>
     * with local element addresses.
     *
     * @param _primary primary
     * @param _count count
     *
     * @throws BluezMeshInvalidArgumentsException when invalid argument given
     */
    void DeleteRemoteNode(UInt16 _primary, byte _count) throws BluezMeshInvalidArgumentsException;

}
